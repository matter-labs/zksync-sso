// This file was autogenerated by some hot garbage in the `uniffi-bindgen-react-native` crate.
// Trust me, you don't want to mess with it!
// @ts-ignore
import {
  type StructuralEquality as UniffiStructuralEquality,
  type UniffiForeignFuture as RuntimeUniffiForeignFuture,
  type UniffiRustCallStatus,
  type UniffiRustArcPtr,
  type UniffiRustFutureContinuationCallback as RuntimeUniffiRustFutureContinuationCallback,
  type UniffiResult,
} from 'uniffi-bindgen-react-native';

interface NativeModuleInterface {
  ubrn_uniffi_internal_fn_func_ffi__string_to_byte_length(
    string: string,
    uniffi_out_err: UniffiRustCallStatus
  ): number;
  ubrn_uniffi_internal_fn_func_ffi__string_to_arraybuffer(
    string: string,
    uniffi_out_err: UniffiRustCallStatus
  ): Uint8Array;
  ubrn_uniffi_internal_fn_func_ffi__arraybuffer_to_string(
    buffer: Uint8Array,
    uniffi_out_err: UniffiRustCallStatus
  ): string;
  ubrn_uniffi_ffi_fn_clone_passkeyauthenticator(
    ptr: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): bigint;
  ubrn_uniffi_ffi_fn_free_passkeyauthenticator(
    ptr: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): void;
  ubrn_uniffi_ffi_fn_method_passkeyauthenticator_sign_message(
    ptr: bigint,
    message: Uint8Array,
    uniffi_out_err: UniffiRustCallStatus
  ): Uint8Array;
  ubrn_uniffi_ffi_fn_clone_passkeyauthenticatorasync(
    ptr: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): bigint;
  ubrn_uniffi_ffi_fn_free_passkeyauthenticatorasync(
    ptr: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): void;
  ubrn_uniffi_ffi_fn_method_passkeyauthenticatorasync_sign_message(
    ptr: bigint,
    message: Uint8Array
  ): bigint;
  ubrn_uniffi_ffi_fn_func_deploy_account(
    passkeyParameters: Uint8Array,
    config: Uint8Array
  ): bigint;
  ubrn_uniffi_ffi_fn_func_deploy_account_with_unique_id(
    passkeyParameters: Uint8Array,
    uniqueAccountId: Uint8Array,
    secretAccountSalt: Uint8Array,
    config: Uint8Array
  ): bigint;
  ubrn_uniffi_ffi_fn_func_fetch_account(
    uniqueAccountId: Uint8Array,
    expectedOrigin: Uint8Array,
    config: Uint8Array
  ): bigint;
  ubrn_uniffi_ffi_fn_func_fund_account(
    address: Uint8Array,
    config: Uint8Array
  ): bigint;
  ubrn_uniffi_ffi_fn_func_generate_random_challenge(
    uniffi_out_err: UniffiRustCallStatus
  ): Uint8Array;
  ubrn_uniffi_ffi_fn_func_get_account_by_user_id(
    uniqueAccountId: Uint8Array,
    secretAccountSalt: Uint8Array,
    config: Uint8Array
  ): bigint;
  ubrn_uniffi_ffi_fn_func_get_balance(
    address: Uint8Array,
    config: Uint8Array
  ): bigint;
  ubrn_uniffi_ffi_fn_func_prepare_send_transaction(
    transaction: Uint8Array,
    from: Uint8Array,
    config: Uint8Array
  ): bigint;
  ubrn_uniffi_ffi_fn_func_send_transaction(
    transaction: Uint8Array,
    authenticator: bigint,
    config: Uint8Array
  ): bigint;
  ubrn_uniffi_ffi_fn_func_send_transaction_async_signer(
    transaction: Uint8Array,
    authenticator: bigint,
    config: Uint8Array
  ): bigint;
  ubrn_ffi_ffi_rust_future_poll_u8(
    handle: bigint,
    callback: UniffiRustFutureContinuationCallback,
    callbackData: bigint
  ): void;
  ubrn_ffi_ffi_rust_future_cancel_u8(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_free_u8(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_complete_u8(
    handle: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): number;
  ubrn_ffi_ffi_rust_future_poll_i8(
    handle: bigint,
    callback: UniffiRustFutureContinuationCallback,
    callbackData: bigint
  ): void;
  ubrn_ffi_ffi_rust_future_cancel_i8(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_free_i8(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_complete_i8(
    handle: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): number;
  ubrn_ffi_ffi_rust_future_poll_u16(
    handle: bigint,
    callback: UniffiRustFutureContinuationCallback,
    callbackData: bigint
  ): void;
  ubrn_ffi_ffi_rust_future_cancel_u16(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_free_u16(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_complete_u16(
    handle: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): number;
  ubrn_ffi_ffi_rust_future_poll_i16(
    handle: bigint,
    callback: UniffiRustFutureContinuationCallback,
    callbackData: bigint
  ): void;
  ubrn_ffi_ffi_rust_future_cancel_i16(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_free_i16(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_complete_i16(
    handle: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): number;
  ubrn_ffi_ffi_rust_future_poll_u32(
    handle: bigint,
    callback: UniffiRustFutureContinuationCallback,
    callbackData: bigint
  ): void;
  ubrn_ffi_ffi_rust_future_cancel_u32(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_free_u32(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_complete_u32(
    handle: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): number;
  ubrn_ffi_ffi_rust_future_poll_i32(
    handle: bigint,
    callback: UniffiRustFutureContinuationCallback,
    callbackData: bigint
  ): void;
  ubrn_ffi_ffi_rust_future_cancel_i32(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_free_i32(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_complete_i32(
    handle: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): number;
  ubrn_ffi_ffi_rust_future_poll_u64(
    handle: bigint,
    callback: UniffiRustFutureContinuationCallback,
    callbackData: bigint
  ): void;
  ubrn_ffi_ffi_rust_future_cancel_u64(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_free_u64(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_complete_u64(
    handle: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): bigint;
  ubrn_ffi_ffi_rust_future_poll_i64(
    handle: bigint,
    callback: UniffiRustFutureContinuationCallback,
    callbackData: bigint
  ): void;
  ubrn_ffi_ffi_rust_future_cancel_i64(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_free_i64(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_complete_i64(
    handle: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): bigint;
  ubrn_ffi_ffi_rust_future_poll_f32(
    handle: bigint,
    callback: UniffiRustFutureContinuationCallback,
    callbackData: bigint
  ): void;
  ubrn_ffi_ffi_rust_future_cancel_f32(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_free_f32(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_complete_f32(
    handle: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): number;
  ubrn_ffi_ffi_rust_future_poll_f64(
    handle: bigint,
    callback: UniffiRustFutureContinuationCallback,
    callbackData: bigint
  ): void;
  ubrn_ffi_ffi_rust_future_cancel_f64(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_free_f64(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_complete_f64(
    handle: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): number;
  ubrn_ffi_ffi_rust_future_poll_pointer(
    handle: bigint,
    callback: UniffiRustFutureContinuationCallback,
    callbackData: bigint
  ): void;
  ubrn_ffi_ffi_rust_future_cancel_pointer(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_free_pointer(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_complete_pointer(
    handle: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): bigint;
  ubrn_ffi_ffi_rust_future_poll_rust_buffer(
    handle: bigint,
    callback: UniffiRustFutureContinuationCallback,
    callbackData: bigint
  ): void;
  ubrn_ffi_ffi_rust_future_cancel_rust_buffer(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_free_rust_buffer(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_complete_rust_buffer(
    handle: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): Uint8Array;
  ubrn_ffi_ffi_rust_future_poll_void(
    handle: bigint,
    callback: UniffiRustFutureContinuationCallback,
    callbackData: bigint
  ): void;
  ubrn_ffi_ffi_rust_future_cancel_void(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_free_void(handle: bigint): void;
  ubrn_ffi_ffi_rust_future_complete_void(
    handle: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): void;
  ubrn_uniffi_ffi_checksum_func_deploy_account(): number;
  ubrn_uniffi_ffi_checksum_func_deploy_account_with_unique_id(): number;
  ubrn_uniffi_ffi_checksum_func_fetch_account(): number;
  ubrn_uniffi_ffi_checksum_func_fund_account(): number;
  ubrn_uniffi_ffi_checksum_func_generate_random_challenge(): number;
  ubrn_uniffi_ffi_checksum_func_get_account_by_user_id(): number;
  ubrn_uniffi_ffi_checksum_func_get_balance(): number;
  ubrn_uniffi_ffi_checksum_func_prepare_send_transaction(): number;
  ubrn_uniffi_ffi_checksum_func_send_transaction(): number;
  ubrn_uniffi_ffi_checksum_func_send_transaction_async_signer(): number;
  ubrn_uniffi_ffi_checksum_method_passkeyauthenticator_sign_message(): number;
  ubrn_uniffi_ffi_checksum_method_passkeyauthenticatorasync_sign_message(): number;
  ubrn_ffi_ffi_uniffi_contract_version(): number;
  ubrn_uniffi_ffi_fn_init_callback_vtable_passkeyauthenticator(
    vtable: UniffiVTableCallbackInterfacePasskeyAuthenticator
  ): void;
  ubrn_uniffi_ffi_fn_init_callback_vtable_passkeyauthenticatorasync(
    vtable: UniffiVTableCallbackInterfacePasskeyAuthenticatorAsync
  ): void;
  ubrn_uniffi_internal_fn_method_passkeyauthenticator_ffi__bless_pointer(
    pointer: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): UniffiRustArcPtr;
  ubrn_uniffi_internal_fn_method_passkeyauthenticatorasync_ffi__bless_pointer(
    pointer: bigint,
    uniffi_out_err: UniffiRustCallStatus
  ): UniffiRustArcPtr;
}

// Casting globalThis to any allows us to look for `NativeFfi`
// if it was added via JSI.
//
// We use a getter here rather than simply `globalThis.NativeFfi` so that
// if/when the startup sequence isn't just so, an empty value isn't inadvertantly cached.
const getter: () => NativeModuleInterface = () => (globalThis as any).NativeFfi;
export default getter;

// Structs and function types for calling back into Typescript from Rust.
export type UniffiRustFutureContinuationCallback = (
  data: bigint,
  pollResult: number
) => void;
type UniffiForeignFutureFree = (handle: bigint) => void;
type UniffiCallbackInterfaceFree = (handle: bigint) => void;
export type UniffiForeignFuture = {
  handle: bigint;
  free: UniffiForeignFutureFree;
};
export type UniffiForeignFutureStructU8 = {
  returnValue: number;
  callStatus: UniffiRustCallStatus;
};
export type UniffiForeignFutureCompleteU8 = (
  callbackData: bigint,
  result: UniffiForeignFutureStructU8
) => void;
export type UniffiForeignFutureStructI8 = {
  returnValue: number;
  callStatus: UniffiRustCallStatus;
};
export type UniffiForeignFutureCompleteI8 = (
  callbackData: bigint,
  result: UniffiForeignFutureStructI8
) => void;
export type UniffiForeignFutureStructU16 = {
  returnValue: number;
  callStatus: UniffiRustCallStatus;
};
export type UniffiForeignFutureCompleteU16 = (
  callbackData: bigint,
  result: UniffiForeignFutureStructU16
) => void;
export type UniffiForeignFutureStructI16 = {
  returnValue: number;
  callStatus: UniffiRustCallStatus;
};
export type UniffiForeignFutureCompleteI16 = (
  callbackData: bigint,
  result: UniffiForeignFutureStructI16
) => void;
export type UniffiForeignFutureStructU32 = {
  returnValue: number;
  callStatus: UniffiRustCallStatus;
};
export type UniffiForeignFutureCompleteU32 = (
  callbackData: bigint,
  result: UniffiForeignFutureStructU32
) => void;
export type UniffiForeignFutureStructI32 = {
  returnValue: number;
  callStatus: UniffiRustCallStatus;
};
export type UniffiForeignFutureCompleteI32 = (
  callbackData: bigint,
  result: UniffiForeignFutureStructI32
) => void;
export type UniffiForeignFutureStructU64 = {
  returnValue: bigint;
  callStatus: UniffiRustCallStatus;
};
export type UniffiForeignFutureCompleteU64 = (
  callbackData: bigint,
  result: UniffiForeignFutureStructU64
) => void;
export type UniffiForeignFutureStructI64 = {
  returnValue: bigint;
  callStatus: UniffiRustCallStatus;
};
export type UniffiForeignFutureCompleteI64 = (
  callbackData: bigint,
  result: UniffiForeignFutureStructI64
) => void;
export type UniffiForeignFutureStructF32 = {
  returnValue: number;
  callStatus: UniffiRustCallStatus;
};
export type UniffiForeignFutureCompleteF32 = (
  callbackData: bigint,
  result: UniffiForeignFutureStructF32
) => void;
export type UniffiForeignFutureStructF64 = {
  returnValue: number;
  callStatus: UniffiRustCallStatus;
};
export type UniffiForeignFutureCompleteF64 = (
  callbackData: bigint,
  result: UniffiForeignFutureStructF64
) => void;
export type UniffiForeignFutureStructPointer = {
  returnValue: bigint;
  callStatus: UniffiRustCallStatus;
};
export type UniffiForeignFutureCompletePointer = (
  callbackData: bigint,
  result: UniffiForeignFutureStructPointer
) => void;
export type UniffiForeignFutureStructRustBuffer = {
  returnValue: Uint8Array;
  callStatus: UniffiRustCallStatus;
};
export type UniffiForeignFutureCompleteRustBuffer = (
  callbackData: bigint,
  result: UniffiForeignFutureStructRustBuffer
) => void;
export type UniffiForeignFutureStructVoid = {
  callStatus: UniffiRustCallStatus;
};
export type UniffiForeignFutureCompleteVoid = (
  callbackData: bigint,
  result: UniffiForeignFutureStructVoid
) => void;
type UniffiCallbackInterfacePasskeyAuthenticatorMethod0 = (
  uniffiHandle: bigint,
  message: Uint8Array
) => UniffiResult<Uint8Array>;
type UniffiCallbackInterfacePasskeyAuthenticatorAsyncMethod0 = (
  uniffiHandle: bigint,
  message: Uint8Array,
  uniffiFutureCallback: UniffiForeignFutureCompleteRustBuffer,
  uniffiCallbackData: bigint
) => UniffiResult<UniffiForeignFuture>;
export type UniffiVTableCallbackInterfacePasskeyAuthenticator = {
  signMessage: UniffiCallbackInterfacePasskeyAuthenticatorMethod0;
  uniffiFree: UniffiCallbackInterfaceFree;
};
export type UniffiVTableCallbackInterfacePasskeyAuthenticatorAsync = {
  signMessage: UniffiCallbackInterfacePasskeyAuthenticatorAsyncMethod0;
  uniffiFree: UniffiCallbackInterfaceFree;
};

// UniffiRustFutureContinuationCallback is generated as part of the component interface's
// ffi_definitions. However, we need it in the runtime.
// We could:
// (a) do some complicated template logic to ensure the declaration is not generated here (possible)
// (b) import the generated declaration into the runtime (m a y b e) or…
// (c) generate the declaration anyway, and use a different declaration in the runtime.
//
// We chose (c) here as the simplest. In addition, we perform a compile time check that
// the two versions of `UniffiRustFutureContinuationCallback` are structurally equivalent.
//
// If you see the error:
// ```
// Type 'true' is not assignable to type 'false'.(2322)
// ```
// Then a new version of uniffi has changed the signature of the callback. Most likely, code in
// `typescript/src/async-rust-call.ts` will need to be changed.
//
// If you see the error:
// ```
// Cannot find name 'UniffiRustFutureContinuationCallback'. Did you mean 'RuntimeUniffiRustFutureContinuationCallback'?(2552)
// ```
// then you may not be using callbacks or promises, and uniffi is now not generating Futures and callbacks.
// You should not generate this if that is the case.
//
// ('You' being the bindings generator maintainer).
const isRustFutureContinuationCallbackTypeCompatible: UniffiStructuralEquality<
  RuntimeUniffiRustFutureContinuationCallback,
  UniffiRustFutureContinuationCallback
> = true;
const isUniffiForeignFutureTypeCompatible: UniffiStructuralEquality<
  RuntimeUniffiForeignFuture,
  UniffiForeignFuture
> = true;
