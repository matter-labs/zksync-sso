// swift-format-ignore-file
#if os(macOS)
import SystemConfiguration
#endif
// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(ZKsyncSSOCore)
    import ZKsyncSSOCore
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len: 0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_ffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_ffi_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_UNEXPECTED_ERROR: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_UNEXPECTED_ERROR:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void
) {
    do {
        try writeReturn(makeCall())
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void,
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private class UniffiHandleMap<T>: @unchecked Sendable {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

    func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        map.count
    }
}

// Public interface members begin here.

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public protocol PasskeyAuthenticator: AnyObject {
    func signMessage(message: Data) throws -> Data
}

open class PasskeyAuthenticatorImpl:
    PasskeyAuthenticator
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ffi_fn_clone_passkeyauthenticator(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ffi_fn_free_passkeyauthenticator(pointer, $0) }
    }

    open func signMessage(message: Data) throws -> Data {
        return try FfiConverterData.lift(rustCallWithError(FfiConverterTypePasskeyAuthenticatorError.lift) {
            uniffi_ffi_fn_method_passkeyauthenticator_sign_message(self.uniffiClonePointer(),
                                                                   FfiConverterData.lower(message), $0)
        })
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfacePasskeyAuthenticator {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    nonisolated(unsafe) static var vtable: UniffiVTableCallbackInterfacePasskeyAuthenticator = .init(
        signMessage: { (
            uniffiHandle: UInt64,
            message: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Data in
                guard let uniffiObj = try? FfiConverterTypePasskeyAuthenticator.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.signMessage(
                    message: FfiConverterData.lift(message)
                )
            }

            let writeReturn = { uniffiOutReturn.pointee = FfiConverterData.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypePasskeyAuthenticatorError.lower
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterTypePasskeyAuthenticator.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface PasskeyAuthenticator: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitPasskeyAuthenticator() {
    uniffi_ffi_fn_init_callback_vtable_passkeyauthenticator(&UniffiCallbackInterfacePasskeyAuthenticator.vtable)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePasskeyAuthenticator: FfiConverter {
    fileprivate static let handleMap = UniffiHandleMap<PasskeyAuthenticator>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PasskeyAuthenticator

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PasskeyAuthenticator {
        return PasskeyAuthenticatorImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PasskeyAuthenticator) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PasskeyAuthenticator {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PasskeyAuthenticator, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePasskeyAuthenticator_lift(_ pointer: UnsafeMutableRawPointer) throws -> PasskeyAuthenticator {
    return try FfiConverterTypePasskeyAuthenticator.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePasskeyAuthenticator_lower(_ value: PasskeyAuthenticator) -> UnsafeMutableRawPointer {
    return FfiConverterTypePasskeyAuthenticator.lower(value)
}

public struct Account {
    public var address: String
    public var uniqueAccountId: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: String, uniqueAccountId: String) {
        self.address = address
        self.uniqueAccountId = uniqueAccountId
    }
}

extension Account: Equatable, Hashable {
    public static func == (lhs: Account, rhs: Account) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.uniqueAccountId != rhs.uniqueAccountId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(uniqueAccountId)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeAccount: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Account {
        return
            try Account(
                address: FfiConverterString.read(from: &buf),
                uniqueAccountId: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: Account, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterString.write(value.uniqueAccountId, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAccount_lift(_ buf: RustBuffer) throws -> Account {
    return try FfiConverterTypeAccount.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAccount_lower(_ value: Account) -> RustBuffer {
    return FfiConverterTypeAccount.lower(value)
}

public struct AccountBalance: Sendable {
    public var balance: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(balance: String) {
        self.balance = balance
    }
}

extension AccountBalance: Equatable, Hashable {
    public static func == (lhs: AccountBalance, rhs: AccountBalance) -> Bool {
        if lhs.balance != rhs.balance {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(balance)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeAccountBalance: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountBalance {
        return
            try AccountBalance(
                balance: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: AccountBalance, into buf: inout [UInt8]) {
        FfiConverterString.write(value.balance, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountBalance_lift(_ buf: RustBuffer) throws -> AccountBalance {
    return try FfiConverterTypeAccountBalance.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeAccountBalance_lower(_ value: AccountBalance) -> RustBuffer {
    return FfiConverterTypeAccountBalance.lower(value)
}

public struct Config {
    public var contracts: PasskeyContracts
    public var nodeUrl: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(contracts: PasskeyContracts, nodeUrl: String) {
        self.contracts = contracts
        self.nodeUrl = nodeUrl
    }
}

extension Config: Equatable, Hashable {
    public static func == (lhs: Config, rhs: Config) -> Bool {
        if lhs.contracts != rhs.contracts {
            return false
        }
        if lhs.nodeUrl != rhs.nodeUrl {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(contracts)
        hasher.combine(nodeUrl)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Config {
        return
            try Config(
                contracts: FfiConverterTypePasskeyContracts.read(from: &buf),
                nodeUrl: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: Config, into buf: inout [UInt8]) {
        FfiConverterTypePasskeyContracts.write(value.contracts, into: &buf)
        FfiConverterString.write(value.nodeUrl, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lift(_ buf: RustBuffer) throws -> Config {
    return try FfiConverterTypeConfig.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeConfig_lower(_ value: Config) -> RustBuffer {
    return FfiConverterTypeConfig.lower(value)
}

public struct PasskeyContracts {
    public var accountFactory: String
    public var passkey: String
    public var session: String
    public var accountPaymaster: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(accountFactory: String, passkey: String, session: String, accountPaymaster: String) {
        self.accountFactory = accountFactory
        self.passkey = passkey
        self.session = session
        self.accountPaymaster = accountPaymaster
    }
}

extension PasskeyContracts: Equatable, Hashable {
    public static func == (lhs: PasskeyContracts, rhs: PasskeyContracts) -> Bool {
        if lhs.accountFactory != rhs.accountFactory {
            return false
        }
        if lhs.passkey != rhs.passkey {
            return false
        }
        if lhs.session != rhs.session {
            return false
        }
        if lhs.accountPaymaster != rhs.accountPaymaster {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accountFactory)
        hasher.combine(passkey)
        hasher.combine(session)
        hasher.combine(accountPaymaster)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePasskeyContracts: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PasskeyContracts {
        return
            try PasskeyContracts(
                accountFactory: FfiConverterString.read(from: &buf),
                passkey: FfiConverterString.read(from: &buf),
                session: FfiConverterString.read(from: &buf),
                accountPaymaster: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: PasskeyContracts, into buf: inout [UInt8]) {
        FfiConverterString.write(value.accountFactory, into: &buf)
        FfiConverterString.write(value.passkey, into: &buf)
        FfiConverterString.write(value.session, into: &buf)
        FfiConverterString.write(value.accountPaymaster, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePasskeyContracts_lift(_ buf: RustBuffer) throws -> PasskeyContracts {
    return try FfiConverterTypePasskeyContracts.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePasskeyContracts_lower(_ value: PasskeyContracts) -> RustBuffer {
    return FfiConverterTypePasskeyContracts.lower(value)
}

public struct PasskeyParameters {
    public var credentialRawAttestationObject: Data
    public var credentialRawClientDataJson: Data
    public var credentialId: Data
    public var rpId: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(credentialRawAttestationObject: Data, credentialRawClientDataJson: Data, credentialId: Data, rpId: String) {
        self.credentialRawAttestationObject = credentialRawAttestationObject
        self.credentialRawClientDataJson = credentialRawClientDataJson
        self.credentialId = credentialId
        self.rpId = rpId
    }
}

extension PasskeyParameters: Equatable, Hashable {
    public static func == (lhs: PasskeyParameters, rhs: PasskeyParameters) -> Bool {
        if lhs.credentialRawAttestationObject != rhs.credentialRawAttestationObject {
            return false
        }
        if lhs.credentialRawClientDataJson != rhs.credentialRawClientDataJson {
            return false
        }
        if lhs.credentialId != rhs.credentialId {
            return false
        }
        if lhs.rpId != rhs.rpId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(credentialRawAttestationObject)
        hasher.combine(credentialRawClientDataJson)
        hasher.combine(credentialId)
        hasher.combine(rpId)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePasskeyParameters: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PasskeyParameters {
        return
            try PasskeyParameters(
                credentialRawAttestationObject: FfiConverterData.read(from: &buf),
                credentialRawClientDataJson: FfiConverterData.read(from: &buf),
                credentialId: FfiConverterData.read(from: &buf),
                rpId: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: PasskeyParameters, into buf: inout [UInt8]) {
        FfiConverterData.write(value.credentialRawAttestationObject, into: &buf)
        FfiConverterData.write(value.credentialRawClientDataJson, into: &buf)
        FfiConverterData.write(value.credentialId, into: &buf)
        FfiConverterString.write(value.rpId, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePasskeyParameters_lift(_ buf: RustBuffer) throws -> PasskeyParameters {
    return try FfiConverterTypePasskeyParameters.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePasskeyParameters_lower(_ value: PasskeyParameters) -> RustBuffer {
    return FfiConverterTypePasskeyParameters.lower(value)
}

public struct PreparedTransaction {
    public var transactionRequestJson: String
    public var from: String
    public var to: String
    public var value: String
    public var displayFee: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(transactionRequestJson: String, from: String, to: String, value: String, displayFee: String) {
        self.transactionRequestJson = transactionRequestJson
        self.from = from
        self.to = to
        self.value = value
        self.displayFee = displayFee
    }
}

extension PreparedTransaction: Equatable, Hashable {
    public static func == (lhs: PreparedTransaction, rhs: PreparedTransaction) -> Bool {
        if lhs.transactionRequestJson != rhs.transactionRequestJson {
            return false
        }
        if lhs.from != rhs.from {
            return false
        }
        if lhs.to != rhs.to {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.displayFee != rhs.displayFee {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(transactionRequestJson)
        hasher.combine(from)
        hasher.combine(to)
        hasher.combine(value)
        hasher.combine(displayFee)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePreparedTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PreparedTransaction {
        return
            try PreparedTransaction(
                transactionRequestJson: FfiConverterString.read(from: &buf),
                from: FfiConverterString.read(from: &buf),
                to: FfiConverterString.read(from: &buf),
                value: FfiConverterString.read(from: &buf),
                displayFee: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: PreparedTransaction, into buf: inout [UInt8]) {
        FfiConverterString.write(value.transactionRequestJson, into: &buf)
        FfiConverterString.write(value.from, into: &buf)
        FfiConverterString.write(value.to, into: &buf)
        FfiConverterString.write(value.value, into: &buf)
        FfiConverterString.write(value.displayFee, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedTransaction_lift(_ buf: RustBuffer) throws -> PreparedTransaction {
    return try FfiConverterTypePreparedTransaction.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypePreparedTransaction_lower(_ value: PreparedTransaction) -> RustBuffer {
    return FfiConverterTypePreparedTransaction.lower(value)
}

public struct SendTransactionResult: Sendable {
    public var txHash: String
    public var receiptJson: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(txHash: String, receiptJson: String) {
        self.txHash = txHash
        self.receiptJson = receiptJson
    }
}

extension SendTransactionResult: Equatable, Hashable {
    public static func == (lhs: SendTransactionResult, rhs: SendTransactionResult) -> Bool {
        if lhs.txHash != rhs.txHash {
            return false
        }
        if lhs.receiptJson != rhs.receiptJson {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(txHash)
        hasher.combine(receiptJson)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendTransactionResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendTransactionResult {
        return
            try SendTransactionResult(
                txHash: FfiConverterString.read(from: &buf),
                receiptJson: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: SendTransactionResult, into buf: inout [UInt8]) {
        FfiConverterString.write(value.txHash, into: &buf)
        FfiConverterString.write(value.receiptJson, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSendTransactionResult_lift(_ buf: RustBuffer) throws -> SendTransactionResult {
    return try FfiConverterTypeSendTransactionResult.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSendTransactionResult_lower(_ value: SendTransactionResult) -> RustBuffer {
    return FfiConverterTypeSendTransactionResult.lower(value)
}

public struct Transaction: Sendable {
    public var to: String
    public var value: String
    public var from: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(to: String, value: String, from: String) {
        self.to = to
        self.value = value
        self.from = from
    }
}

extension Transaction: Equatable, Hashable {
    public static func == (lhs: Transaction, rhs: Transaction) -> Bool {
        if lhs.to != rhs.to {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.from != rhs.from {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(to)
        hasher.combine(value)
        hasher.combine(from)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransaction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Transaction {
        return
            try Transaction(
                to: FfiConverterString.read(from: &buf),
                value: FfiConverterString.read(from: &buf),
                from: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: Transaction, into buf: inout [UInt8]) {
        FfiConverterString.write(value.to, into: &buf)
        FfiConverterString.write(value.value, into: &buf)
        FfiConverterString.write(value.from, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTransaction_lift(_ buf: RustBuffer) throws -> Transaction {
    return try FfiConverterTypeTransaction.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTransaction_lower(_ value: Transaction) -> RustBuffer {
    return FfiConverterTypeTransaction.lower(value)
}

public enum ConfigError {
    case InvalidContractAddress(String
    )
    case InvalidNodeUrl(String
    )
    case WriteError(String
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeConfigError: FfiConverterRustBuffer {
    typealias SwiftType = ConfigError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConfigError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .InvalidContractAddress(
                FfiConverterString.read(from: &buf)
            )
        case 2: return try .InvalidNodeUrl(
                FfiConverterString.read(from: &buf)
            )
        case 3: return try .WriteError(
                FfiConverterString.read(from: &buf)
            )
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ConfigError, into buf: inout [UInt8]) {
        switch value {
        case let .InvalidContractAddress(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)

        case let .InvalidNodeUrl(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)

        case let .WriteError(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
        }
    }
}

extension ConfigError: Equatable, Hashable {}

extension ConfigError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

public enum DeployAccountError {
    case Deploy(String
    )
    case AccountAlreadyDeployed
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDeployAccountError: FfiConverterRustBuffer {
    typealias SwiftType = DeployAccountError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DeployAccountError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .Deploy(
                FfiConverterString.read(from: &buf)
            )

        case 2: return .AccountAlreadyDeployed

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DeployAccountError, into buf: inout [UInt8]) {
        switch value {
        case let .Deploy(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)

        case .AccountAlreadyDeployed:
            writeInt(&buf, Int32(2))
        }
    }
}

extension DeployAccountError: Equatable, Hashable {}

extension DeployAccountError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

public enum FundAccountError {
    case FundAccount(String
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeFundAccountError: FfiConverterRustBuffer {
    typealias SwiftType = FundAccountError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FundAccountError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .FundAccount(
                FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FundAccountError, into buf: inout [UInt8]) {
        switch value {
        case let .FundAccount(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
        }
    }
}

extension FundAccountError: Equatable, Hashable {}

extension FundAccountError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

public enum GetAccountBalanceError {
    case GetBalance(String
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeGetAccountBalanceError: FfiConverterRustBuffer {
    typealias SwiftType = GetAccountBalanceError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetAccountBalanceError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .GetBalance(
                FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GetAccountBalanceError, into buf: inout [UInt8]) {
        switch value {
        case let .GetBalance(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
        }
    }
}

extension GetAccountBalanceError: Equatable, Hashable {}

extension GetAccountBalanceError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

public enum PasskeyAuthenticatorError {
    case Get(String
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePasskeyAuthenticatorError: FfiConverterRustBuffer {
    typealias SwiftType = PasskeyAuthenticatorError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PasskeyAuthenticatorError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .Get(
                FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PasskeyAuthenticatorError, into buf: inout [UInt8]) {
        switch value {
        case let .Get(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
        }
    }
}

extension PasskeyAuthenticatorError: Equatable, Hashable {}

extension PasskeyAuthenticatorError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

public enum PrepareTransactionError {
    case PrepareTransaction(String
    )
    case InvalidAddress(String
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypePrepareTransactionError: FfiConverterRustBuffer {
    typealias SwiftType = PrepareTransactionError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PrepareTransactionError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .PrepareTransaction(
                FfiConverterString.read(from: &buf)
            )

        case 2: return try .InvalidAddress(
                FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PrepareTransactionError, into buf: inout [UInt8]) {
        switch value {
        case let .PrepareTransaction(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)

        case let .InvalidAddress(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
        }
    }
}

extension PrepareTransactionError: Equatable, Hashable {}

extension PrepareTransactionError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

public enum SendTransactionError {
    case SendTransaction(String
    )
    case InvalidAddress(String
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendTransactionError: FfiConverterRustBuffer {
    typealias SwiftType = SendTransactionError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendTransactionError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .SendTransaction(
                FfiConverterString.read(from: &buf)
            )

        case 2: return try .InvalidAddress(
                FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SendTransactionError, into buf: inout [UInt8]) {
        switch value {
        case let .SendTransaction(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)

        case let .InvalidAddress(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
        }
    }
}

extension SendTransactionError: Equatable, Hashable {}

extension SendTransactionError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

nonisolated(unsafe) private let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

private func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> Void,
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> Void,
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
private func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}

public func deployAccount(passkeyParameters: PasskeyParameters, config: Config) async throws -> Account {
    return
        try await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_ffi_fn_func_deploy_account(FfiConverterTypePasskeyParameters.lower(passkeyParameters), FfiConverterTypeConfig.lower(config))
            },
            pollFunc: ffi_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAccount.lift,
            errorHandler: FfiConverterTypeDeployAccountError.lift
        )
}

public func deployAccountWithUniqueId(passkeyParameters: PasskeyParameters, uniqueAccountId: String, secretAccountSalt: String, config: Config) async throws -> Account {
    return
        try await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_ffi_fn_func_deploy_account_with_unique_id(FfiConverterTypePasskeyParameters.lower(passkeyParameters), FfiConverterString.lower(uniqueAccountId), FfiConverterString.lower(secretAccountSalt), FfiConverterTypeConfig.lower(config))
            },
            pollFunc: ffi_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAccount.lift,
            errorHandler: FfiConverterTypeDeployAccountError.lift
        )
}

public func fundAccount(address: String, config: Config) async throws {
    return
        try await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_ffi_fn_func_fund_account(FfiConverterString.lower(address), FfiConverterTypeConfig.lower(config))
            },
            pollFunc: ffi_ffi_rust_future_poll_void,
            completeFunc: ffi_ffi_rust_future_complete_void,
            freeFunc: ffi_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeFundAccountError.lift
        )
}

public func getBalance(address: String, config: Config) async throws -> AccountBalance {
    return
        try await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_ffi_fn_func_get_balance(FfiConverterString.lower(address), FfiConverterTypeConfig.lower(config))
            },
            pollFunc: ffi_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeAccountBalance.lift,
            errorHandler: FfiConverterTypeGetAccountBalanceError.lift
        )
}

public func prepareSendTransaction(transaction: Transaction, from: String, config: Config) async throws -> PreparedTransaction {
    return
        try await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_ffi_fn_func_prepare_send_transaction(FfiConverterTypeTransaction.lower(transaction), FfiConverterString.lower(from), FfiConverterTypeConfig.lower(config))
            },
            pollFunc: ffi_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypePreparedTransaction.lift,
            errorHandler: FfiConverterTypePrepareTransactionError.lift
        )
}

public func sendTransaction(transaction: Transaction, authenticator: PasskeyAuthenticator, config: Config) async throws -> SendTransactionResult {
    return
        try await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_ffi_fn_func_send_transaction(FfiConverterTypeTransaction.lower(transaction), FfiConverterTypePasskeyAuthenticator.lower(authenticator), FfiConverterTypeConfig.lower(config))
            },
            pollFunc: ffi_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeSendTransactionResult.lift,
            errorHandler: FfiConverterTypeSendTransactionError.lift
        )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_ffi_checksum_func_deploy_account() != 40553 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_ffi_checksum_func_deploy_account_with_unique_id() != 62711 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_ffi_checksum_func_fund_account() != 20619 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_ffi_checksum_func_get_balance() != 46562 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_ffi_checksum_func_prepare_send_transaction() != 43366 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_ffi_checksum_func_send_transaction() != 44442 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_ffi_checksum_method_passkeyauthenticator_sign_message() != 23237 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitPasskeyAuthenticator()
    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all

extension Config: Codable {}
extension PasskeyContracts: Codable {}
