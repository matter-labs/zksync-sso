name: Rust CI
permissions:
  contents: read

on:
  push:
    paths:
      - "packages/contracts/**"
      - "packages/sdk-platforms/rust/**"
      - ".github/workflows/ci-rust.yml"
  pull_request:
    paths:
      - "packages/contracts/**"
      - "packages/sdk-platforms/rust/**"
      - ".github/workflows/ci-rust.yml"

jobs:
  rust-sdk:
    name: Rust Legacy SDK
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
          - debug
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4

      - name: Install Rust
        run: |
          rustup update nightly && rustup default nightly
          rustup toolchain install nightly

      - name: Run rustfmt
        run: |
          rustup component add rustfmt --toolchain nightly
          cargo +nightly fmt --all -- --check
        working-directory: packages/sdk-platforms/rust/zksync-sso

      - name: Install Anvil ZKsync Manually
        run: |
          SCRIPT_PATH=".github/workflows/scripts/install-anvil-zksync.sh"
          chmod +x "$SCRIPT_PATH"
          bash "$SCRIPT_PATH"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.11.0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/Iron
          cache: pnpm

      - name: Install dependencies
        run: pnpm install -r --frozen-lockfile

      - name: Install contract dependencies
        run: pnpm install -r --frozen-lockfile
        working-directory: packages/contracts

      - name: Build contracts
        run: pnpm build
        working-directory: packages/contracts

      - name: Run clippy
        run: |
          rustup component add clippy --toolchain stable
          rustup component add --toolchain 1.90.0-x86_64-unknown-linux-gnu clippy
          cargo clippy --all-targets -- -D warnings
        working-directory: packages/sdk-platforms/rust/zksync-sso

      - name: Start anvil-zksync node
        run: |
          anvil-zksync --cache=none run > anvil-zksync.log 2>&1 &
          # Wait a few seconds to ensure the node starts
          sleep 5
          # Verify it's running
          if ! pgrep -f "anvil-zksync"; then
            echo "Error: anvil-zksync failed to start"
            cat anvil-zksync.log
            exit 1
          fi

      - name: Run rust tests
        run: cargo test -- --test-threads=1
        working-directory: packages/sdk-platforms/rust/zksync-sso

      # - name: Run integration tests
      #   run: cargo test test_complete_zksync_sso_integration -- --ignored
      #   working-directory: packages/sdk-platforms/rust/zksync-sso

  rust-sdk-erc4337:
    name: Rust 4337 SDK
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
          - debug
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4

      - name: Install Rust
        run: |
          rustup update nightly && rustup default nightly
          rustup toolchain install nightly

      - name: Run rustfmt
        run: |
          rustup component add rustfmt --toolchain nightly
          cargo +nightly fmt --all -- --check
        working-directory: packages/sdk-platforms/rust/zksync-sso-erc4337

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1.4.0

      - name: Install dependencies
        run: forge soldeer install
        working-directory: packages/erc4337-contracts

      - name: Install Node.js 22 via nvm
        run: |
          export NVM_DIR="$HOME/.nvm"
          mkdir -p "$NVM_DIR"
          curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
          . "$NVM_DIR/nvm.sh"
          nvm install 22
          nvm use 22
          node -v
          # Expose Node.js bin dir to subsequent steps
          echo "$(dirname $(nvm which 22))" >> $GITHUB_PATH

      - name: Configure pnpm store dir
        run: echo "PNPM_STORE_DIR=$HOME/.pnpm-store" >> $GITHUB_ENV

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('packages/erc4337-contracts/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Enable corepack and activate pnpm from contracts package.json
        run: |
          corepack enable
          corepack prepare "$(node -p "require('./package.json').packageManager")" --activate
          pnpm -v
        working-directory: packages/erc4337-contracts

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: packages/erc4337-contracts

      - name: Build ERC-4337 contracts
        run: forge build
        working-directory: packages/erc4337-contracts

      - name: Verify ERC-4337 contract ABIs exist
        run: |
          set -euo pipefail
          missing=()
          files=(
            "out/IERC7579Account.sol/IERC7579Account.json"
            "out/SimpleAccountFactory.sol/SimpleAccountFactory.json"
            "out/SimpleAccount.sol/SimpleAccount.json"
            "out/EntryPoint.sol/EntryPoint.json"
          )
          for f in "${files[@]}"; do
            if [ ! -f "$f" ]; then
              missing+=("$f")
            fi
          done
          if [ ${#missing[@]} -gt 0 ]; then
            echo "Missing expected ABI JSON files:" >&2
            for m in "${missing[@]}"; do echo " - $m" >&2; done
            echo "\nAvailable JSON files under out/:" >&2
            find out -maxdepth 2 -type f -name '*.json' | sort || true
            exit 1
          fi
        working-directory: packages/erc4337-contracts

      - name: Run clippy
        run: |
          rustup component add clippy --toolchain stable
          rustup component add --toolchain 1.90.0-x86_64-unknown-linux-gnu clippy
          cargo clippy --all-targets -- -D warnings
        working-directory: packages/sdk-platforms/rust/zksync-sso-erc4337

      - name: Run rust tests
        run: cargo test
        working-directory: packages/sdk-platforms/rust/zksync-sso-erc4337
